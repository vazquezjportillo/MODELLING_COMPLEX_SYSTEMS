import numpy as np
import matplotlib.pyplot as plt

def logistic_map(r, x):
    return r * x * (1 - x)

def perturbed_logistic_map(r, x, a):
    return logistic_map(r, x) + a * x**4

def sine_map(r, x):
    return r * np.sin(np.pi * x)

def compute_bifurcation_diagram(r_values, x0, num_iter, num_tran, map_function, a=None):
    r = []
    x_= []
    for r_val in r_values:
        x = x0
        for _ in range(num_tran):
            x = map_function(r_val, x) if a is None else map_function(r_val, x, a)
        for _ in range(num_iter):
            x = map_function(r_val, x) if a is None else map_function(r_val, x, a)
            r.append(r_val)
            x_.append(x)
    return r,x_

# Parameters
r_values = np.linspace(2.4, 4.0, 1000)
x0 = 0.1
num_iterations = 1000
num_transient = 100
a = 0.01  # Small constant for perturbed logistic map

# Compute bifurcation diagram for perturbed logistic map
r,x = compute_bifurcation_diagram(r_values, x0, num_iterations, num_transient, perturbed_logistic_map, a)

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(r,x, s=0.1, c='black')
plt.xlabel('r')
plt.ylabel('x')
plt.title('Bifurcation Diagram of the Perturbed Logistic Map')
plt.show()

# Compute bifurcation diagram for sine map
r,x = compute_bifurcation_diagram(r_values, x0, num_iterations, num_transient, sine_map)

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(r,x, s=0.1, c='black')
plt.xlabel('r')
plt.ylabel('x')
plt.title('Bifurcation Diagram of the Sine Map')
plt.show()